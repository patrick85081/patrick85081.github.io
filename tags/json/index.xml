<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Json on 派翠克技術手札</title><link>https://patrick85081.github.io/tags/json/</link><description>Recent content in Json on 派翠克技術手札</description><generator>Hugo -- gohugo.io</generator><language>zh-TW</language><lastBuildDate>Tue, 12 Apr 2022 20:21:21 +0800</lastBuildDate><atom:link href="https://patrick85081.github.io/tags/json/index.xml" rel="self" type="application/rss+xml"/><item><title>快速上手 System.Text.Json</title><link>https://patrick85081.github.io/posts/2022-04-12-about-system-text-json/</link><pubDate>Tue, 12 Apr 2022 20:21:21 +0800</pubDate><guid>https://patrick85081.github.io/posts/2022-04-12-about-system-text-json/</guid><description>現在有些C#程式使用到Json時，慢慢地從Newtown.Json轉換成System.Text.Json，System.Text.Json有些手法還是需要學習一下。
範例 Json 資料 這是本次範例使用的Json資料
{ // Commit &amp;#34;Field&amp;#34;: { &amp;#34;AA&amp;#34;: 1234, &amp;#34;BB&amp;#34;: &amp;#34;中文&amp;#34;, } } Json Option System.Text.Json在 序列化 與 反序列化 有些 Option 需要注意
序列化 預設不允許註解、不允許 尾端欄位 有逗號 new JsonDocumentOptions { // 允許 Json 註解 CommentHandling = JsonCommentHandling.Skip, // 允許 尾端欄位 有逗號 AllowTrailingCommas = true } 反序列化 預設 沒有開啟中文的編碼，所以有需要輸出中文需要特別設定。 new JsonSerializerOptions() { Encoder = JavaScriptEncoder.UnsafeRelaxedJsonEscaping } Utf8JsonWriter / Utf8JsonReader 這是裡面較為低階的處理方式，屬於一次一個節點的處理，JsonConverter會需要此操作，所以還是必須學會。
var stream = new MemoryStream(); var writer = new Utf8JsonWriter(stream, new JsonWriterOptions { Encoder = JavaScriptEncoder.</description></item></channel></rss>