<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Halcon on 派翠克技術手札</title><link>https://patrick85081.github.io/tags/halcon/</link><description>Recent content in Halcon on 派翠克技術手札</description><generator>Hugo -- gohugo.io</generator><language>zh-TW</language><lastBuildDate>Wed, 03 Feb 2021 20:06:07 +0800</lastBuildDate><atom:link href="https://patrick85081.github.io/tags/halcon/index.xml" rel="self" type="application/rss+xml"/><item><title>Halcon Frame Grabber</title><link>https://patrick85081.github.io/posts/2021-02-03-halcon-frame-grabber/</link><pubDate>Wed, 03 Feb 2021 20:06:07 +0800</pubDate><guid>https://patrick85081.github.io/posts/2021-02-03-halcon-frame-grabber/</guid><description>Halcon是一套付費的影像處裡函式庫，為了方便測試裡面的影像處理功能，所以她有整合了一些相機取像的功能，Halcon將軟體切成四層：
軟體架構 Halcon Application
這裡代表我們開發的軟體，或者HDevlop測試工具
Halcon Image Processing Library
這裡是我們使用的Halcon函示庫，就是halcon.dll
Halcon xyz Frame Grabber Interface
Halcon做的一套中間取像的抽象層，也就是我們軟體界所說的 interface
Frame Grabber Driver &amp;amp; SDK
這裡是實作取像功能的實作，整合不同廠牌的相機驅動，為了方便我們可以使用
使用方式 選擇實作介面 也可以使用自動偵測，判斷電腦本身可以使用哪些取像實作 連結相機 這裡展示就只使用File方式，指定資料夾內的影像，模擬相機取像的效果。 相機參數設定 這裡可以設定相機參數，例如使用GenICamTL，這裡就會出現GenICamTL參數 使用範本產生程式碼 HDevelop Demo C# Demo 對於寫相機SDK有經驗的朋友可能會說，相機SDK怎麼可以沒有取像Callback方法呢?
其實Halcon也有提供，但經過測試發現不是所有的實作都支援Callback方法，但如果只是要取像測試的話，這樣單張取像的方式應該也就夠用了。
Halcon Frame Grabber Callback 測試過 GenICamTL 有支援
var grabber = new HFramegrabber( &amp;#34;GenICamTL&amp;#34;, 0, 0, 0, 0, 0, 0, &amp;#34;progressive&amp;#34;, -1, &amp;#34;default&amp;#34;, -1, &amp;#34;false&amp;#34;, &amp;#34;default&amp;#34;, _deviceName, 0, -1); grabber.</description></item><item><title>Halcon 常用的Function</title><link>https://patrick85081.github.io/posts/2020-11-18-halcon-note/halcon-note/</link><pubDate>Wed, 18 Nov 2020 22:18:52 +0800</pubDate><guid>https://patrick85081.github.io/posts/2020-11-18-halcon-note/halcon-note/</guid><description>影像分割 固定二值化 // P3, P4 =&amp;gt; 二值化閥值區間 threshold(GrayImage, DarkArea, 0, 128) 直方圖自動二值化 // P3 =&amp;gt; Sigma 高斯運算 平滑算子 auto_threshold(GrayImage, DarkArea, 8.0) P.S. 可用 gray_histo or gen_region_histo 查看直方圖
自動全局二值化 利用直方圖像素分佈，例如最大類間方插法或平滑直方圖法
// P3 =&amp;gt; 二值化的方法 // max_separability 直方圖中最大的可分性分割 // smooth_histo 平滑直方圖 // P4 =&amp;gt; 取 亮部 light 還是 暗部 dark // P5 =&amp;gt; 輸出 自動二值化使用的閥值 binary_threshold(GrayImage, DarkArea, &amp;#39;max_separability&amp;#39;, &amp;#39;dark&amp;#39;, UsedThreshold) 局部閥值分割法 適用於無法用單一灰階分割情況，如背景複雜，亮暗不均
步驟
套用平滑濾波器 使用dyn_threshold 比較 原始圖像 與 套用平滑濾波器 後的影像差異，將差異大於設定值的點找出來 // P3 =&amp;gt; 輸出的閥值區域 // P4 =&amp;gt; Offset 值，比較後大於該值將被提取出來 // P5 =&amp;gt; 哪個區域 // light 原圖 &amp;gt;= 平滑後 + Offset // dark 原圖 &amp;lt;= 平滑後 - Offset // equal (平滑後 + Offset) &amp;lt; 原圖 &amp;lt; (平滑後 - Offset) // not_equal (平滑後 + Offset) &amp;gt;= 原圖 Or 原圖 &amp;gt;= (平滑後 - Offset) dyn_threshold(Image, ImageMean, RegionDynThresh, 4, &amp;#39;not_equal&amp;#39;) Var_Threshold // P3, P4 =&amp;gt; Mask 長寬 // P5 =&amp;gt; 標準差因子 // P6 =&amp;gt; 絕對閥值 // P7 =&amp;gt; dark, light, equal, not_equal var_threshold(Image, Region, 15, 15, 0.</description></item><item><title>Halcon 影像記憶體洩漏</title><link>https://patrick85081.github.io/posts/2020-10-06-halcon-image-leak/</link><pubDate>Tue, 06 Oct 2020 20:25:42 +0800</pubDate><guid>https://patrick85081.github.io/posts/2020-10-06-halcon-image-leak/</guid><description>問題情境 假設因相機或機構問題，相機取到的影像需做簡易影像旋轉和翻轉功能。我們來做幾個簡單的實驗，驗證影像記憶體的佔用情況。
需求：
彩色黑白轉換 水平翻轉 垂直翻轉 旋轉 跑一千次觀察記憶體使用量 方案一 HImage依序做完所有的影像處理。 方案二 HImage 每做完一個影像處裡，就Dispose前一張影像` 結論 Halcon 每做完一次影像處理，其實是做資料複製，記憶體中的資料從一張影像會變成兩張影像，做越多次處裡記憶體的佔用也就越大，所以記得每次處理完都需要做影像銷毀。
附上範例程式碼，執行前請先安裝Halcon 12</description></item></channel></rss>