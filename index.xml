<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>派翠克技術手札</title><link>https://patrick85081.github.io/</link><description>Recent content on 派翠克技術手札</description><generator>Hugo -- gohugo.io</generator><language>zh-TW</language><lastBuildDate>Wed, 30 Mar 2022 13:12:45 +0800</lastBuildDate><atom:link href="https://patrick85081.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>SQL 批次刪除，資料轉型失敗問題</title><link>https://patrick85081.github.io/posts/2022-03-29-entityframework-batch-delete-cast-not-valid/</link><pubDate>Wed, 30 Mar 2022 13:12:45 +0800</pubDate><guid>https://patrick85081.github.io/posts/2022-03-29-entityframework-batch-delete-cast-not-valid/</guid><description>原由 最近碰到一個有去的錯誤，當透過EntityFrameworkPlus 做資料庫資料批次刪除，結果卻回傳InvalidCastException，但是卻只有這個DB才有此問題，這問題真叫人苦惱。
原程式很單純，大致上如下：
dataContext.Employees .Where(e =&amp;gt; e.Year &amp;gt; 30) .Delete(); 結果 結果發現因之前有資料庫除錯上需求，在該資料表加入 Delete Trigger，應該要 Insert 刪除記錄到另一張表，卻寫成資料 Select。
陰錯陽差之下在 Entity Framework Plus 下達刪除命令後，會去抓資料庫回傳的影響資料筆數，卻抓到 Trigger 產生出來的資料，造成使用該資料的第一個Row第一個Column資料，轉型成 影響筆數 （Int32） 才出的錯誤，結案。</description></item><item><title>SQL Server Use SSL</title><link>https://patrick85081.github.io/posts/2022-03-28-sql-server-use-ssl/</link><pubDate>Mon, 28 Mar 2022 21:59:29 +0800</pubDate><guid>https://patrick85081.github.io/posts/2022-03-28-sql-server-use-ssl/</guid><description>今天來研究一下，SQL Server如何使用SSL加密連線，保護資料的安全性。
mmc 產生憑證 SQL Server 使用SSL憑證 開啟 SQL Server 組態管理員
強制加密 是：Client 一律使用加密連線 否：由 Client 決定是否加密 增加 NT Service\MSSQLSERVER 使用憑證權限 重啟 SQL Server
Client 連線 Encrypt connection 使用加密連線 (對應連線字串 Encrypt=True)
Trust server certificate 信任憑證 (對應連線字串 TrustServerCertificate=True)
驗證是否加密 使用Wireshark 使用 TDS 過濾 看不到 SQL Batch 就代表加密成功
參考資料 啟用 SQL Server SSL 連線加密</description></item><item><title>Ldap 資料查詢</title><link>https://patrick85081.github.io/posts/2022-03-26-ldap-connection/</link><pubDate>Sat, 26 Mar 2022 15:38:18 +0800</pubDate><guid>https://patrick85081.github.io/posts/2022-03-26-ldap-connection/</guid><description>Ldap 連線 之前接手的程式碼是使用DirectoryEntry來做Ldap連線，但一直試不出來Ssl連線，後來查了一下，原來可以使用LdapConnection，這裡來記錄一下它的使用方式。
Nuget 安裝 dotnet add package System.DirectoryServices.Protocol
Simple Bind var ldap = new LdapConnection(&amp;#34;192.168.10.201:389&amp;#34;); ldap.AuthType = AuthType.Basic; ldap.SessionOptions.ProtocolVersion = 3; // 登入 ldap.Bind(new NetworkCredential(&amp;#34;Account&amp;#34;, &amp;#34;Password&amp;#34;)); Sasl var ldap = new LdapConnection(&amp;#34;192.168.10.201:389&amp;#34;); // Sasl ldap.AuthType = AuthType.Negotiate; ldap.SessionOptions.ProtocolVersion = 3; //ldap.SessionOptions.Signing = true; //ldap.SessionOptions.Sealing = true; // 登入 ldap.Bind(new NetworkCredential(&amp;#34;Account&amp;#34;, &amp;#34;Password&amp;#34;)); SSL var ldap = new LdapConnection(&amp;#34;192.168.10.201:636&amp;#34;); ldap.AuthType = AuthType.Basic; ldap.SessionOptions.ProtocolVersion = 3; // SSL ldap.SessionOptions.SecureSocketLayer = true; // 略過 憑證檢查 ldap.</description></item><item><title>Halcon 常用的Function</title><link>https://patrick85081.github.io/posts/2022-03-22-halcon-note/halcon-note/</link><pubDate>Tue, 22 Mar 2022 22:18:52 +0800</pubDate><guid>https://patrick85081.github.io/posts/2022-03-22-halcon-note/halcon-note/</guid><description>影像分割 固定二值化 // P3, P4 =&amp;gt; 二值化閥值區間 threshold(GrayImage, DarkArea, 0, 128) 直方圖自動二值化 // P3 =&amp;gt; Sigma 高斯運算 平滑算子 auto_threshold(GrayImage, DarkArea, 8.0) P.S. 可用 gray_histo or gen_region_histo 查看直方圖
自動全局二值化 利用直方圖像素分佈，例如最大類間方插法或平滑直方圖法
// P3 =&amp;gt; 二值化的方法 // max_separability 直方圖中最大的可分性分割 // smooth_histo 平滑直方圖 // P4 =&amp;gt; 取 亮部 light 還是 暗部 dark // P5 =&amp;gt; 輸出 自動二值化使用的閥值 binary_threshold(GrayImage, DarkArea, &amp;#39;max_separability&amp;#39;, &amp;#39;dark&amp;#39;, UsedThreshold) 局部閥值分割法 適用於無法用單一灰階分割情況，如背景複雜，亮暗不均
步驟
套用平滑濾波器 使用dyn_threshold 比較 原始圖像 與 套用平滑濾波器 後的影像差異，將差異大於設定值的點找出來 // P3 =&amp;gt; 輸出的閥值區域 // P4 =&amp;gt; Offset 值，比較後大於該值將被提取出來 // P5 =&amp;gt; 哪個區域 // light 原圖 &amp;gt;= 平滑後 + Offset // dark 原圖 &amp;lt;= 平滑後 - Offset // equal (平滑後 + Offset) &amp;lt; 原圖 &amp;lt; (平滑後 - Offset) // not_equal (平滑後 + Offset) &amp;gt;= 原圖 Or 原圖 &amp;gt;= (平滑後 - Offset) dyn_threshold(Image, ImageMean, RegionDynThresh, 4, &amp;#39;not_equal&amp;#39;) Var_Threshold // P3, P4 =&amp;gt; Mask 長寬 // P5 =&amp;gt; 標準差因子 // P6 =&amp;gt; 絕對閥值 // P7 =&amp;gt; dark, light, equal, not_equal var_threshold(Image, Region, 15, 15, 0.</description></item><item><title>AvaloniaUI 踩坑紀錄</title><link>https://patrick85081.github.io/posts/2022-03-21-avaloniaui-first/</link><pubDate>Mon, 21 Mar 2022 19:45:10 +0800</pubDate><guid>https://patrick85081.github.io/posts/2022-03-21-avaloniaui-first/</guid><description>前言 從.Net Framework到.Net，微軟的C#終於可以跨平台，跑在Linux、Docker Container，但是桌面應用程式WinForm、WPF依然只能Windows，然而有個開源項目Avalonia卻是以WPF的風格做出跨平台的桌面應用程式，雖然在各方面都還不構成熟，我們期待它未來的發展。
環境建置 Dotnet 樣板 下載樣板 Avalonia Dotnet Template
安裝樣板
dotnet new –install [path-to-repository]
Avalonia 樣板 範本名稱 簡短名稱 語言 標記 Avalonia .NET Core App avalonia.app [C#],F# ui/xaml/avalonia/avaloniaui Avalonia .NET Core MVVM App avalonia.mvvm [C#],F# ui/xaml/avalonia/avaloniaui Avalonia UserControl avalonia.usercontrol [C#],F# ui/xaml/avalonia/avaloniaui Avalonia Window avalonia.window [C#],F# ui/xaml/avalonia/avaloniaui Avalonia TemplatedControl avalonia.</description></item><item><title>ARP 協議</title><link>https://patrick85081.github.io/posts/2022-03-19-arp-protocol/</link><pubDate>Sat, 19 Mar 2022 10:58:28 +0800</pubDate><guid>https://patrick85081.github.io/posts/2022-03-19-arp-protocol/</guid><description>說明 ARP全名為Address Resolution Protocol （位置發現協議），在網路鏈路層上傳遞封包都需要知道目的的Mac Address，但在網路曾是使用網路層地止IP Address，所以需要透過ARP協議去廣播，詢問對方的Mac Address。
ARP 運作 ARP運作方式相當簡單，一個是ARP 詢問（ARP Request），一個是ARP 答復（ARP Reply）。
透過發送ARP Request去廣過，區域網路上的所有電腦，詢問IP地址的MAC地址是多少，如果收到網播的電腦不是這個IP地址就會忽略它，但收到的電腦剛好是這個IP地址，就會進行ARP Reply回應自己的MAC地址。由於路由器會阻擋區域網路中的廣播封包，所以ARP只能詢問同一個網路。
每一台電腦上都有自己的ARP快取，同一個地址一段時間只會詢問一次，避免廣播風暴的發生，另外也可以使用靜態ARP設定，這樣就不需要詢問，但是這兩種方式只要重新開機都會清空。
ARP 指令 查詢ARP記錄 可以利用 arp -a 指令來查詢電腦中所儲存的ARP記錄
C:\&amp;gt; arp -a Interface: 192.168.1.128 --- 0x10 Internet Address Physical Address Type 192.168.1.1 c0-06-c3-3b-5b-ec dynamic 192.168.1.255 ff-ff-ff-ff-ff-ff static 224.0.0.2 01-00-5e-00-00-02 static 224.0.0.22 01-00-5e-00-00-16 static 224.0.0.251 01-00-5e-00-00-fb static 224.0.0.252 01-00-5e-00-00-fc static 239.255.255.250 01-00-5e-7f-ff-fa static 新增靜態APR記錄 利用 arp -s &amp;lt;IP地址&amp;gt; &amp;lt;MAC地址&amp;gt; 新增靜態地址
C:\&amp;gt; arp -s 203.74.205.42 00-00-e8-97-73-86 刪除APR記錄 可利用 arp -d 刪除全部或 arp -d &amp;lt;IP地址&amp;gt; 刪除指定IP的方式。</description></item><item><title>Search Results</title><link>https://patrick85081.github.io/search/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://patrick85081.github.io/search/</guid><description/></item></channel></rss>